import socket
import json
import time
import threading
from datetime import datetime
from data_loader import DataLoader
from agents import DispatcherAgent, MonitorAgent, TrafficAgent, OrderAgent, CourierAgent
from config import SERVER_HOST, SERVER_PORT, BUFFER_SIZE


class CourierServer:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞, –∫—É—Ä—å–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        data = DataLoader.load_input_data("input_data.json")
        self.dispatcher = DispatcherAgent()
        self.monitor = MonitorAgent()
        self.traffic_agent = TrafficAgent()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞
        for order_data in data.get("orders", []):
            order = OrderAgent(
                order_id=order_data["id"],
                destination=order_data["destination"],
                weight=order_data["weight"],
                priority=order_data["priority"],
                time_window=order_data["time_window"],
                description=order_data.get("description", "")
            )
            self.dispatcher.add_order(order)

        self.clients = {}  # {client_socket: {"address": address, "courier_id": id}}
        self.running = True
        self.dispatcher.traffic_data["factor"] = self.traffic_agent.get_traffic_factor()

        print(f"–°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–∫–∞–∑–æ–≤: {len(self.dispatcher.orders)}")

    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç: {address}")
        self.clients[client_socket] = {"address": address, "courier_id": None}

        try:
            buffer = ""
            while self.running:
                try:
                    data = client_socket.recv(BUFFER_SIZE).decode('utf-8')
                    if not data:
                        break

                    buffer += data

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ \n)
                    while '\n' in buffer:
                        message_str, buffer = buffer.split('\n', 1)
                        if message_str.strip():
                            self.process_message(message_str.strip(), client_socket)

                except socket.timeout:
                    continue
                except ConnectionResetError:
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç {address}: {e}")
                    break

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {address}: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if client_socket in self.clients:
                courier_id = self.clients[client_socket].get("courier_id")
                if courier_id and courier_id in self.dispatcher.couriers:
                    print(f"üö´ –ö—É—Ä—å–µ—Ä {courier_id} –æ—Ç–∫–ª—é—á–µ–Ω")
                    # –ú–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –∫–∞–∫ offline –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
                    # self.dispatcher.couriers[courier_id].status = "offline"

                del self.clients[client_socket]
            client_socket.close()
            print(f"üîå –ö–ª–∏–µ–Ω—Ç {address} –æ—Ç–∫–ª—é—á–µ–Ω")

    def process_message(self, message, client_socket):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            data = json.loads(message)
            message_type = data.get("type")

            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message_type} –æ—Ç {self.clients[client_socket]['address']}")

            if message_type == "courier_update":
                self.handle_courier_update(data, client_socket)
            elif message_type == "new_order":
                self.handle_new_order(data)
            elif message_type == "order_delivered":
                self.handle_order_delivered(data)
            elif message_type == "emergency":
                self.handle_emergency(data)
            elif message_type == "traffic_update":
                self.handle_traffic_update(data)
            elif message_type == "get_status":
                self.send_status(client_socket)
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    def handle_courier_update(self, data, client_socket):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞"""
        courier_id = data["courier_id"]

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
        if courier_id not in self.dispatcher.couriers:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
            courier = CourierAgent(
                agent_id=courier_id,
                location=data["location"],
                transport_type=data["transport_type"],
                max_capacity=50.0,
                name=data.get("name", f"Courier_{courier_id}")
            )
            self.dispatcher.add_courier(courier)
            print(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫—É—Ä—å–µ—Ä: {courier.name} (ID: {courier_id})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
            courier = self.dispatcher.couriers[courier_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        courier.location = data.get("location", courier.location)
        courier.status = data.get("status", "available")
        courier.transport_type = data.get("transport_type", courier.transport_type)
        courier.name = data.get("name", courier.name)
        courier.last_update = time.time()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        self.clients[client_socket]["courier_id"] = courier_id

        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä {courier_id}: {courier.status} –≤ {courier.location}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞
        pending_orders = [o for o in self.dispatcher.orders.values() if o.status == "pending"]
        if pending_orders and courier.status == "available":
            print(f"üì¶ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ {courier_id}...")
            self.dispatcher.assign_orders()
            self.monitor.update_statistics(self.dispatcher)

            # ‚úÖ –í–ê–ñ–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            self.broadcast_system_status()

    def handle_new_order(self, data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        order_data = data["order"]
        order_id = order_data["id"]

        if order_id not in self.dispatcher.orders:
            order = OrderAgent(
                order_id=order_data["id"],
                destination=order_data["destination"],
                weight=order_data["weight"],
                priority=order_data["priority"],
                time_window=order_data["time_window"],
                description=order_data.get("description", "")
            )
            self.dispatcher.add_order(order)
            print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_id} - {order.description}")

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑
            self.dispatcher.assign_orders()
            self.monitor.update_statistics(self.dispatcher)
            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω")

            # ‚úÖ –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            self.broadcast_system_status()
        else:
            print(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def handle_order_delivered(self, data):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π"""
        order_id = data["order_id"]
        courier_id = data["courier_id"]

        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –∑–∞–∫–∞–∑ {order_id}, –∫—É—Ä—å–µ—Ä {courier_id}")

        if (courier_id in self.dispatcher.couriers and
                order_id in self.dispatcher.orders):

            courier = self.dispatcher.couriers[courier_id]
            order = self.dispatcher.orders[order_id]

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
            order.status = "delivered"
            courier.complete_order(order_id)

            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–æ–º {courier_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.monitor.update_statistics(self.dispatcher)

            # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.broadcast_system_status()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –∫—É—Ä—å–µ—Ä {courier_id} –∏–ª–∏ –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def handle_emergency(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é"""
        emergency_type = data["emergency_type"]

        if emergency_type == "courier_unavailable":
            courier_id = data["courier_id"]
            self.dispatcher.handle_emergency(courier_id)
            print(f"üö® –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ß–ü —Å –∫—É—Ä—å–µ—Ä–æ–º {courier_id}")
        elif emergency_type == "traffic_accident":
            self.traffic_agent.update_traffic("heavy")
            self.dispatcher.traffic_data["factor"] = self.traffic_agent.get_traffic_factor()
            print("üö¶ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ: –ø—Ä–æ–±–∫–∏ –∏–∑-–∑–∞ –∞–≤–∞—Ä–∏–∏")

        self.monitor.update_statistics(self.dispatcher)
        self.broadcast_system_status()

    def handle_traffic_update(self, data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ"""
        condition = data["condition"]
        result = self.traffic_agent.update_traffic(condition)
        if result:
            self.dispatcher.traffic_data["factor"] = result["factor"]
            print(f"üö¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {result['description']}")
            self.broadcast_system_status()

    def send_status(self, client_socket):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–ª–∏–µ–Ω—Ç—É"""
        status_data = self._prepare_status_data()

        try:
            response = json.dumps(status_data, ensure_ascii=False) + "\n"
            client_socket.send(response.encode('utf-8'))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def _prepare_status_data(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞"""
        # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
        active_couriers = []
        current_time = time.time()
        for courier in self.dispatcher.couriers.values():
            if current_time - courier.last_update < 300:  # 5 –º–∏–Ω—É—Ç
                active_couriers.append(courier)

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        active_assignments = []
        for assignment in self.dispatcher.assignments:
            courier_id = assignment.get('courier_id')
            if courier_id in [c.id for c in active_couriers]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –∑–∞–∫–∞–∑ –∏ –æ–Ω –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                order_id = assignment.get('order_id')
                if (order_id in self.dispatcher.orders and
                        self.dispatcher.orders[order_id].status != "delivered"):
                    active_assignments.append(assignment)

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        orders_list = list(self.dispatcher.orders.values())
        total_orders = len(orders_list)
        delivered_orders = len([o for o in orders_list if o.status == "delivered"])
        in_progress_orders = len([o for o in orders_list if o.status == "assigned"])
        pending_orders = len([o for o in orders_list if o.status == "pending"])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∞
        self.monitor.statistics.update({
            "total_orders": total_orders,
            "delivered": delivered_orders,
            "in_progress": in_progress_orders,
            "pending": pending_orders,
            "courier_utilization": (len([c for c in active_couriers if c.current_orders]) / len(
                active_couriers) * 100) if active_couriers else 0
        })

        return {
            "type": "system_status",
            "couriers": [c.to_dict() for c in active_couriers],
            "orders": [o.to_dict() for o in self.dispatcher.orders.values()],
            "assignments": active_assignments,
            "statistics": self.monitor.statistics,
            "traffic": self.traffic_agent.current_condition,
            "timestamp": datetime.now().isoformat()
        }

    def broadcast_system_status(self):
        """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        status_data = self._prepare_status_data()
        self.broadcast_message(status_data)

    def broadcast_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        disconnected_clients = []
        for client_socket in list(self.clients.keys()):
            try:
                response = json.dumps(message, ensure_ascii=False) + "\n"
                client_socket.send(response.encode('utf-8'))
            except:
                disconnected_clients.append(client_socket)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client_socket in disconnected_clients:
            if client_socket in self.clients:
                courier_id = self.clients[client_socket].get("courier_id")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–∫—É—Ä—å–µ—Ä {courier_id})")
                del self.clients[client_socket]

    def periodic_tasks(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        while self.running:
            time.sleep(10)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.monitor.update_statistics(self.dispatcher)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã
            pending_orders = [o for o in self.dispatcher.orders.values() if o.status == "pending"]
            active_couriers = [c for c in self.dispatcher.couriers.values()
                               if time.time() - c.last_update < 300 and c.status == "available"]

            if pending_orders and active_couriers:
                print(f"üîÑ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(pending_orders)} –∑–∞–∫–∞–∑–æ–≤, {len(active_couriers)} –∫—É—Ä—å–µ—Ä–æ–≤")
                self.dispatcher.assign_orders()
                self.monitor.update_statistics(self.dispatcher)
                # ‚úÖ –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                self.broadcast_system_status()

            # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            update_msg = {
                "type": "periodic_update",
                "statistics": self.monitor.statistics,
                "timestamp": datetime.now().isoformat()
            }
            self.broadcast_message(update_msg)

            print(f"üìä –°–µ—Ä–≤–µ—Ä: {len(self.clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤, {len(self.dispatcher.orders)} –∑–∞–∫–∞–∑–æ–≤, "
                  f"{self.monitor.statistics['delivered']} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")

    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.settimeout(1.0)

        try:
            server_socket.bind((SERVER_HOST, SERVER_PORT))
            server_socket.listen(5)
            print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {SERVER_HOST}:{SERVER_PORT}")
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            periodic_thread = threading.Thread(target=self.periodic_tasks)
            periodic_thread.daemon = True
            periodic_thread.start()

            while self.running:
                try:
                    client_socket, address = server_socket.accept()
                    client_socket.settimeout(1.0)
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()

                except socket.timeout:
                    continue
                except Exception as e:
                    if self.running:
                        print(f"‚ùå –û—à–∏–±–∫–∞ accept: {e}")

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.running = False
            server_socket.close()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            from data_loader import DataLoader
            DataLoader.save_output_data(self.dispatcher, self.monitor)
            print("üî¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    server = CourierServer()
    server.start_server()