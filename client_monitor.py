import socket
import json
import time
import threading
from datetime import datetime
from config import SERVER_HOST, SERVER_PORT


class MonitorClient:
    def __init__(self, server_host=SERVER_HOST, server_port=SERVER_PORT):
        self.server_host = server_host
        self.server_port = server_port
        self.socket = None
        self.connected = False
        self.buffer = ""
        self.auto_refresh = False
        self.last_status = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10.0)
            self.socket.connect((self.server_host, self.server_port))
            self.connected = True
            print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É {self.server_host}:{self.server_port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            receive_thread = threading.Thread(target=self.receive_messages)
            receive_thread.daemon = True
            receive_thread.start()

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.server_host}:{self.server_port}: {e}")
            return False

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.connected:
            return False

        try:
            data = json.dumps(message, ensure_ascii=False) + "\n"
            self.socket.send(data.encode('utf-8'))
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def request_status(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        message = {
            "type": "get_status"
        }

        if self.send_message(message):
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            time.sleep(0.5)
            return self.last_status
        return None

    def receive_messages(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        buffer = ""
        while self.connected:
            try:
                data = self.socket.recv(8192).decode('utf-8')
                if not data:
                    break

                buffer += data

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ \n)
                while '\n' in buffer:
                    message_str, buffer = buffer.split('\n', 1)
                    if message_str.strip():
                        self.handle_server_message(message_str.strip())

            except socket.timeout:
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break

        self.connected = False
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

    def handle_server_message(self, message_str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            message = json.loads(message_str)
            msg_type = message.get("type")

            if msg_type == "system_status":
                self.last_status = message
                if self.auto_refresh:
                    self.display_status(message)
            elif msg_type == "periodic_update":
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = message.get("statistics", {})
                if self.auto_refresh:
                    print(f"üì° –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('delivered', 0)} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, "
                          f"{stats.get('pending', 0)} –æ–∂–∏–¥–∞–µ—Ç")

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")

    def display_status(self, status_data):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not status_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            return False

        print("\n" + "=" * 70)
        print(f"üìä –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ê–í–ö–ò - {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 70)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = status_data.get("statistics", {})
        delivered = stats.get('delivered', 0)
        total = stats.get('total_orders', 0)
        in_progress = stats.get('in_progress', 0)
        pending = stats.get('pending', 0)
        progress = (delivered / total * 100) if total > 0 else 0

        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total} | ‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered} | "
              f"üöö –í —Ä–∞–±–æ—Ç–µ: {in_progress} | ‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending}")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
        print(f"   –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–æ–≤: {stats.get('courier_utilization', 0):.1f}%")

        # –¢—Ä–∞—Ñ–∏–∫
        traffic = status_data.get("traffic", "normal")
        traffic_icons = {"normal": "üü¢", "busy": "üü°", "heavy": "üü†", "blocked": "üî¥"}
        traffic_icon = traffic_icons.get(traffic, "‚ö™")
        print(f"   {traffic_icon} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic.upper()}")

        # –ö—É—Ä—å–µ—Ä—ã
        couriers = status_data.get("couriers", [])
        active_couriers = [c for c in couriers if c.get('status') == 'available']
        busy_couriers = [c for c in couriers if c.get('status') == 'busy']

        print(f"\nüöö –ö–£–†–¨–ï–†–´ ({len(active_couriers) + len(busy_couriers)} –≤—Å–µ–≥–æ):")
        print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã: {len(active_couriers)} | üü° –ó–∞–Ω—è—Ç—ã: {len(busy_couriers)}")

        if couriers:
            for courier in couriers:
                orders_count = len(courier.get('current_orders', []))
                status = courier.get('status', 'unknown')

                if status == 'available':
                    status_icon = "üü¢"
                elif status == 'busy':
                    status_icon = "üü°"
                else:
                    status_icon = "üî¥"

                transport_icons = {
                    "car": "üöó", "bicycle": "üö≤", "foot": "üö∂", "motorcycle": "üèçÔ∏è"
                }
                transport_icon = transport_icons.get(courier.get('transport_type', ''), 'üì¶')

                print(f"   {status_icon} {transport_icon} {courier['name']}: "
                      f"{orders_count} –∑–∞–∫–∞–∑–æ–≤ | {status}")
        else:
            print("   ‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤")

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        assignments = status_data.get("assignments", [])
        if assignments:
            print(f"\nüìã –ê–ö–¢–ò–í–ù–´–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø ({len(assignments)}):")
            for assignment in assignments[-8:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
                courier_id = assignment.get('courier_id')
                order_id = assignment.get('order_id')
                estimated_time = assignment.get('estimated_time', '?')

                # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∫—É—Ä—å–µ—Ä–∞
                courier_name = f"–ö—É—Ä—å–µ—Ä {courier_id}"
                for c in couriers:
                    if c.get('id') == courier_id:
                        courier_name = c.get('name', courier_name)
                        break

                print(f"   üöÄ {courier_name} ‚Üí –ó–∞–∫–∞–∑ #{order_id} ({estimated_time})")
        else:
            print(f"\nüìã –ê–ö–¢–ò–í–ù–´–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø: –Ω–µ—Ç")

        # –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
        orders = status_data.get("orders", [])
        pending_orders = [o for o in orders if o.get('status') == 'pending']
        if pending_orders:
            print(f"\n‚è≥ –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–ö–ê–ó–´ ({len(pending_orders)}):")
            for order in pending_orders[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
                priority = order.get('priority', 'normal')
                priority_icons = {"high": "üî¥", "normal": "üü°", "low": "üîµ"}
                priority_icon = priority_icons.get(priority, "‚ö™")

                print(f"   {priority_icon} #{order['id']}: {order['description']} "
                      f"({order['weight']}–∫–≥, {order['time_window']})")

        # –ù–µ–¥–∞–≤–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        delivered_orders = [o for o in orders if o.get('status') == 'delivered']
        recent_delivered = sorted(delivered_orders,
                                  key=lambda x: x.get('created_time', 0),
                                  reverse=True)[:3]

        if recent_delivered:
            print(f"\n‚úÖ –ù–ï–î–ê–í–ù–û –î–û–°–¢–ê–í–õ–ï–ù–ù–´–ï ({len(recent_delivered)}):")
            for order in recent_delivered:
                print(f"   ‚úÖ #{order['id']}: {order['description']}")

        print("=" * 70)
        return True

    def start_auto_refresh(self, interval=5):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.connected:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        print(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫)...")
        self.auto_refresh = True

        try:
            while self.connected and self.auto_refresh:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                self.send_message({"type": "get_status"})
                time.sleep(interval)

        except KeyboardInterrupt:
            print("‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def stop_auto_refresh(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.auto_refresh = False
        print("‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if not self.connected:
            return

        print("\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        self.show_help()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
        self.send_message({"type": "get_status"})
        time.sleep(1)
        if self.last_status:
            self.display_status(self.last_status)

        while self.connected:
            try:
                command = input("\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()

                if command in ["quit", "exit", "q"]:
                    break
                elif command == "status":
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
                    self.send_message({"type": "get_status"})
                    time.sleep(0.5)
                    if self.last_status:
                        self.display_status(self.last_status)
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
                elif command == "traffic":
                    self.handle_traffic_command()
                elif command == "emergency":
                    self.handle_emergency_command()
                elif command == "add_order":
                    self.add_test_order()
                elif command == "auto_on":
                    self.start_auto_refresh_in_thread()
                elif command == "auto_off":
                    self.stop_auto_refresh()
                elif command == "help":
                    self.show_help()
                elif command == "":
                    continue
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
                    print("   –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

            except KeyboardInterrupt:
                print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("  status    - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("  traffic   - –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞")
        print("  emergency - —Å–æ–æ–±—â–∏—Ç—å –æ –ß–ü")
        print("  add_order - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑")
        print("  auto_on   - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)")
        print("  auto_off  - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        print("  help      - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  quit      - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

    def handle_traffic_command(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
        print("üö¶ –î–û–°–¢–£–ü–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –¢–†–ê–§–ò–ö–ê:")
        print("  normal  - üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
        print("  busy    - üü° –ù–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
        print("  heavy   - üü† –ü—Ä–æ–±–∫–∏")
        print("  blocked - üî¥ –î–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞")

        condition = input("üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ").strip().lower()
        if condition in ["normal", "busy", "heavy", "blocked"]:
            if self.send_message({
                "type": "traffic_update",
                "condition": condition
            }):
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {condition}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: normal, busy, heavy, blocked")

    def handle_emergency_command(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ß–ü"""
        print("üö® –¢–ò–ü–´ –ß–†–ï–ó–í–´–ß–ê–ô–ù–´–• –°–ò–¢–£–ê–¶–ò–ô:")
        print("  courier_unavailable - üì¶ –ö—É—Ä—å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("  traffic_accident    - üöó –î–æ—Ä–æ–∂–Ω–∞—è –∞–≤–∞—Ä–∏—è")

        emergency_type = input("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ß–ü: ").strip().lower()
        description = input("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ").strip()

        if emergency_type in ["courier_unavailable", "traffic_accident"]:
            if self.send_message({
                "type": "emergency",
                "emergency_type": emergency_type,
                "description": description
            }):
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ß–ü: {emergency_type}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ß–ü")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ß–ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: courier_unavailable, traffic_accident")

    def add_test_order(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        import random

        order_id = random.randint(1000, 9999)
        order_data = {
            "type": "new_order",
            "order": {
                "id": order_id,
                "destination": [
                    55.75 + random.uniform(-0.02, 0.02),
                    37.62 + random.uniform(-0.02, 0.02)
                ],
                "weight": round(random.uniform(1, 15), 1),
                "priority": random.choice(["high", "normal", "normal", "low"]),
                "time_window": f"{random.randint(10, 16)}:00-{random.randint(17, 20)}:00",
                "description": f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}"
            }
        }

        if self.send_message(order_data):
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            self.send_message({"type": "get_status"})
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

    def start_auto_refresh_in_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        import threading
        if not self.auto_refresh:
            refresh_thread = threading.Thread(target=self.start_auto_refresh)
            refresh_thread.daemon = True
            refresh_thread.start()
            print("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)")
        else:
            print("‚ÑπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        self.auto_refresh = False
        self.connected = False
        if self.socket:
            self.socket.close()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")


def main():
    import argparse

    parser = argparse.ArgumentParser(description='–ö–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏')
    parser.add_argument('--host', default=SERVER_HOST, help='–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--port', type=int, default=SERVER_PORT, help='–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')

    args = parser.parse_args()

    monitor = MonitorClient(server_host=args.host, server_port=args.port)

    if monitor.connect():
        try:
            monitor.interactive_mode()
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞...")
        finally:
            monitor.disconnect()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


if __name__ == "__main__":
    main()