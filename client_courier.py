import socket
import json
import time
import random
import threading
from config import SERVER_HOST, SERVER_PORT


class CourierClient:
    def __init__(self, courier_id, name="", location=None, transport_type="car"):
        self.courier_id = courier_id
        self.name = name or f"Courier_{courier_id}"
        self.location = location or [55.75 + random.uniform(-0.01, 0.01),
                                     37.62 + random.uniform(-0.01, 0.01)]
        self.transport_type = transport_type
        self.socket = None
        self.connected = False
        self.assigned_orders = []

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10.0)
            self.socket.connect((SERVER_HOST, SERVER_PORT))
            self.connected = True
            print(f"‚úÖ –ö—É—Ä—å–µ—Ä {self.name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            self.send_courier_update()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            receive_thread = threading.Thread(target=self.receive_messages)
            receive_thread.daemon = True
            receive_thread.start()

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.connected:
            return False

        try:
            data = json.dumps(message, ensure_ascii=False) + "\n"
            self.socket.send(data.encode('utf-8'))
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.connected = False
            return False

    def send_courier_update(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞"""
        message = {
            "type": "courier_update",
            "courier_id": self.courier_id,
            "location": self.location,
            "status": "available",
            "name": self.name,
            "transport_type": self.transport_type
        }

        return self.send_message(message)

    def send_order_delivered(self, order_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞"""
        message = {
            "type": "order_delivered",
            "courier_id": self.courier_id,
            "order_id": order_id
        }

        if self.send_message(message):
            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")
            return True
        return False

    def receive_messages(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        buffer = ""
        while self.connected:
            try:
                data = self.socket.recv(4096).decode('utf-8')
                if not data:
                    break

                buffer += data

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ \n)
                while '\n' in buffer:
                    message_str, buffer = buffer.split('\n', 1)
                    if message_str.strip():
                        self.handle_server_message(message_str.strip())

            except socket.timeout:
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break

        self.connected = False
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

    def handle_server_message(self, message_str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            message = json.loads(message_str)
            msg_type = message.get("type")

            if msg_type == "system_status":
                self.handle_system_status(message)
            elif msg_type == "periodic_update":
                self.handle_periodic_update(message)

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")

    def handle_system_status(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        assignments = message.get("assignments", [])
        my_assignments = [a for a in assignments if a.get("courier_id") == self.courier_id]

        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        new_orders = []
        for assignment in my_assignments:
            order_id = assignment.get("order_id")
            if order_id and order_id not in self.assigned_orders:
                new_orders.append(order_id)
                self.assigned_orders.append(order_id)

        if new_orders:
            print(f"üéØ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: {new_orders}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = message.get("statistics", {})
        pending = stats.get('pending', 0)
        delivered = stats.get('delivered', 0)

        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {delivered} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, {pending} –æ–∂–∏–¥–∞–µ—Ç, –º–æ–∏ –∑–∞–∫–∞–∑—ã: {len(my_assignments)}")

    def handle_periodic_update(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        stats = message.get("statistics", {})
        pending = stats.get('pending', 0)
        delivered = stats.get('delivered', 0)
        print(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {delivered} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, {pending} –æ–∂–∏–¥–∞–µ—Ç")

    def simulate_work(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫—É—Ä—å–µ—Ä–∞"""
        if not self.connected:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        print(f"üöÄ –ö—É—Ä—å–µ—Ä {self.name} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        try:
            work_cycle = 0
            while self.connected:
                time.sleep(20)  # –£–º–µ–Ω—å—à–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
                work_cycle += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                self.location[0] += random.uniform(-0.001, 0.001)
                self.location[1] += random.uniform(-0.001, 0.001)

                if self.send_courier_update():
                    if work_cycle % 5 == 0:  # –†–µ–∂–µ –≤—ã–≤–æ–¥–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                        print(f"üìç –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")

                # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–∫–∞–∑–∞ (–∫–∞–∂–¥—ã–µ 3 —Ü–∏–∫–ª–∞)
                if work_cycle % 3 == 0 and self.assigned_orders:
                    order_id = self.assigned_orders.pop(0)
                    if self.send_order_delivered(order_id):
                        print(f"üì¶ –ó–∞–∫–∞–∑ {order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.assigned_orders)}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑
                        self.assigned_orders.insert(0, order_id)

                # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ß–ü (–æ—á–µ–Ω—å –º–∞–ª–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                if random.random() < 0.01:  # 1% —à–∞–Ω—Å
                    print("üö® –ß–ü: –∫—É—Ä—å–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ!")
                    # –ù–µ —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
                    time.sleep(5)

        except KeyboardInterrupt:
            print("\nüõë –†–∞–±–æ—Ç–∞ –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∫—É—Ä—å–µ—Ä–∞: {e}")

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        self.connected = False
        if self.socket:
            self.socket.close()


def main():
    import argparse

    parser = argparse.ArgumentParser(description='–ö–ª–∏–µ–Ω—Ç –∫—É—Ä—å–µ—Ä–∞')
    parser.add_argument('--id', type=int, required=True, help='ID –∫—É—Ä—å–µ—Ä–∞')
    parser.add_argument('--name', help='–ò–º—è –∫—É—Ä—å–µ—Ä–∞')
    parser.add_argument('--transport', choices=['foot', 'bicycle', 'car', 'motorcycle'],
                        default='car', help='–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')

    args = parser.parse_args()

    # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –ú–æ—Å–∫–≤–µ
    base_lat, base_lon = 55.751244, 37.618423
    location = [
        base_lat + random.uniform(-0.02, 0.02),
        base_lon + random.uniform(-0.02, 0.02)
    ]

    courier = CourierClient(
        courier_id=args.id,
        name=args.name,
        location=location,
        transport_type=args.transport
    )

    if courier.connect():
        try:
            courier.simulate_work()
        except KeyboardInterrupt:
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        finally:
            courier.disconnect()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


if __name__ == "__main__":
    main()